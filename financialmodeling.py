# -*- coding: utf-8 -*-
"""Financialmodeling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xMYdjVeDBUe7vxXADHLtgOrH5mh9gmmK
"""

## Rice forecasting and prediction:
# Data Loading
from google.colab import drive
import pandas as pd
drive.mount('/content/drive')
file_path = '/content/drive/My Drive/Rice.csv'
df = pd.read_csv(file_path)

df.head()
df

# Production

from matplotlib import pyplot as plt
df['Production'].plot(kind='line', figsize=(8, 4), title='Forecasting according to rice data')
plt.gca().spines[['top', 'right']].set_visible(False)

import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense
import numpy as np

# Keep only production column
df = df[['Production']]

# Convert to float
df['Production'] = df['Production'].astype(float)

# Scale the data
scaler = MinMaxScaler()
df['Production'] = scaler.fit_transform(df[['Production']])

# Split data into train and test
train = df.loc[:'2010-11']
test = df.loc['2011-12':]

# Reshape for LSTM
X_train = train.values.reshape(-1,1)
X_test = test.values.reshape(-1,1)

# Build LSTM model
model = Sequential()
model.add(LSTM(80, activation='relu', input_shape=(1, 1)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')

# Train model
model.fit(X_train, X_train, epochs=800, batch_size=1, verbose=0)

# Predict on test
pred = model.predict(X_test)
pred = scaler.inverse_transform(pred)

# Evaluate model
mae = mean_absolute_error(test, pred)
print("MAE:", mae)

# Plot results
plt.plot(pred, color='red', label='Predicted Production')
plt.title('Rice Production Prediction')
plt.legend()
plt.show()

# Predict next 30 years
X_new = test.values[-30:].reshape(-1,1)
next_30_years = model.predict(X_new)
next_30_years = scaler.inverse_transform(next_30_years)
print(next_30_years)

# Fit curve
x = np.arange(0, len(df))
y = df['Production'].values
p = np.polyfit(x, y, 4)
f = np.poly1d(p)

print(f) # Print equation

# Define the polynomial coefficients
a = -1.148e-08
b = - 1.014e-06
c = 0.0002617
d = 0.004356
e = 0.04133
# Profit calculation:
C= 1000     # for eg. taking cost price per production

# Evaluate the polynomial at certain value of x
x_val = 82.07022
polynomial_value = a * pow(x_val,4) + b * pow(x_val,3) + c * pow(x_val,2) + d * x_val + e
print("Polynomial value at x =", x_val, "is", polynomial_value)
print(C*polynomial_value) # profit eg

# Data Loading
from google.colab import drive
import pandas as pd
drive.mount('/content/drive')
file_path = '/content/drive/My Drive/Wheat.csv'
df = pd.read_csv(file_path)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error
from keras.models import Sequential
from keras.layers import LSTM, Dense

# Keep production column
df = df[['Production']]

# Convert to float
df['Production'] = df['Production'].astype(float)

# Production

from matplotlib import pyplot as plt
df['Production'].plot(kind='line', figsize=(8, 4), title='Forecasting according to wheat data')
plt.gca().spines[['top', 'right']].set_visible(False)

# Scale data
scaler = MinMaxScaler()
scaled = scaler.fit_transform(df)

# Split data into train and test
train = df.loc[:'2010-11']
test = df.loc['2011-12':]

# Reshape for LSTM
X_train = train.values.reshape(-1,1)
X_test = test.values.reshape(-1,1)

# Build LSTM
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(1, 1)))
model.add(Dense(1))
model.compile(loss='mse', optimizer='adam')

# Train model
model.fit(X_train, X_train, epochs=200, batch_size=1, verbose=0)

# Predict and rescale
pred = model.predict(X_test)
pred = scaler.inverse_transform(pred)

# Evaluate model
mae = mean_absolute_error(test, pred)
print("MAE:", mae)

# Plot results
plt.plot(pred, color='red', label='Predicted')
plt.title('Wheat Production Prediction')
plt.xlabel('Year')
plt.ylabel('Production')
plt.legend()
plt.show()

# Prediction on 2024-2051 time frame
X_future = np.arange(2024,2051).reshape(-1,1)
X_future_poly = poly.fit_transform(X_future)
future_pred = model.predict(X_future_poly)
print(future_pred)

# Fit curve
x = np.arange(0, len(df))
y = df['Production'].values
p = np.polyfit(x, y, 2)
f = np.poly1d(p)

print(f) # Print equation

# Define the polynomial coefficients
a = 0.007956
b = 0.9395
c = 1.586
# Profit calculation:
C= 1000     # for eg. taking cost price per production

# Evaluate the polynomial at certain value of x
x_val = 1.9178593e+13
polynomial_value = a * pow(x_val,2) + b * x_val + c
print("Polynomial value at x =", x_val, "is", polynomial_value)
print(C*polynomial_value) # profit eg